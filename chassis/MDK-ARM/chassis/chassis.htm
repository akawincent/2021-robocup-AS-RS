<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [chassis\chassis.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image chassis\chassis.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Aug 03 20:35:33 2022
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM6_DAC_IRQHandler &rArr; chassis_synthetic_control &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[69]">CEC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5a]">CRYP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from stm32f7xx_it.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from stm32f7xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from stm32f7xx_it.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from stm32f7xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[65]">DMA2D_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5b]">HASH_RNG_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6b]">I2C4_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6a]">I2C4_EV_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[68]">LPTIM1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[64]">LTDC_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[63]">LTDC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f7xx_it.o(i.PendSV_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[67]">QUADSPI_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[62]">SAI1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[66]">SAI2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3c]">SDMMC1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6c]">SPDIF_RX_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5f]">SPI4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[60]">SPI5_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[61]">SPI6_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f7xx_it.o(i.SVC_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6e]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f750xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from stm32f7xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from stm32f7xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from time_cnt.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from stm32f7xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from stm32f7xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5d]">UART7_IRQHandler</a> from stm32f7xx_it.o(i.UART7_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5e]">UART8_IRQHandler</a> from stm32f7xx_it.o(i.UART8_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[70]">UART_DMAAbortOnError</a> from stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[73]">UART_DMAError</a> from stm32f7xx_hal_uart.o(i.UART_DMAError) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[71]">UART_DMAReceiveCplt</a> from stm32f7xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[72]">UART_DMARxHalfCplt</a> from stm32f7xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from stm32f7xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f750xx.o(.text)
 <LI><a href="#[6d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[89]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[17f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[180]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_incremental
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_positional
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_freq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel3Callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel1Callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel3Callback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel1Callback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_incremental
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_positional
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_freq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel3Callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel1Callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel3Callback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel1Callback
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_incremental
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_positional
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[185]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[186]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[187]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[189]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Catch_Steppedplatform_blue</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, catch_task.o(i.Catch_Steppedplatform_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Catch_Steppedplatform_blue &rArr; move_by_encoder &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_distinguish_Stepped
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_3
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_2
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_1
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_3_to_storehouse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_2_to_storehouse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_1_to_storehouse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Stepped_distinguish
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[9b]"></a>Catch_Steppedplatform_red</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, catch_task.o(i.Catch_Steppedplatform_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Catch_Steppedplatform_red &rArr; servogroup_catch_Steppedplatform_3 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_distinguish_Stepped
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_3
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_2
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_1
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_3_to_storehouse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_2_to_storehouse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_1_to_storehouse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Stepped_distinguish
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
</UL>

<P><STRONG><a name="[131]"></a>Clear_SendBUF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ats522.o(i.Clear_SendBUF))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[154]"></a>Get_Time_Period</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, time_cnt.o(i.Get_Time_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Time_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_incremental
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_positional
</UL>

<P><STRONG><a name="[134]"></a>Get_ats522</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, ats522.o(i.Get_ats522))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_ats522
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
</UL>

<P><STRONG><a name="[e5]"></a>Get_openmv</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, openmv.o(i.Get_openmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_openmv
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[e3]"></a>Get_qrcode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, qrcode.o(i.Get_qrcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_qrcode
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[e1]"></a>Get_trackboard</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, trackboard.o(i.Get_trackboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_trackboard
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[9d]"></a>HAL_DMA_Abort</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>HAL_DMA_Init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a2]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[a4]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
</UL>

<P><STRONG><a name="[c5]"></a>HAL_GPIO_Init</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_or_red
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel3Callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel1Callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel3Callback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel1Callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_red
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_blue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_red
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_blue
</UL>

<P><STRONG><a name="[9e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[107]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a5]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a6]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ad]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1276 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ae]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[110]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[af]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b0]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 888 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 150 bytes, Stack size 28 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[b1]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, motor_encoder.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel3Callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel1Callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel3Callback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel1Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor4_Enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_Enable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_Enable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_Enable
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC6_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor4_Enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_Enable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_Enable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_Enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steering_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, motor_encoder.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IcOverflowCntCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IcOverflowCntCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel3Callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5CaptureChannel1Callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel3Callback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3CaptureChannel1Callback
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f7xx_hal_uart_ex.o(i.HAL_UARTEx_ReceiveToIdle_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_trackboard_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_trackboard_IRQ
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_qrcode_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_qrcode_IRQ
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_openmv_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_openmv_IRQ
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_ats522_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_ats522_IRQ
</UL>

<P><STRONG><a name="[df]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_trackboard_IRQ
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_qrcode_IRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_openmv_IRQ
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_ats522_IRQ
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_trackboard
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_qrcode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_openmv
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[ea]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[e7]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_UART_MspInit</STRONG> (Thumb, 804 bytes, Stack size 64 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[10e]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[f2]"></a>HAL_UART_Transmit</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_restore_default
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Authkey
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Anticoll
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_transfer_red
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_transfer_blue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_transfer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_distinguish_Strip
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_distinguish_Stepped
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_catch_red_disc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distinguish_red
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distinguish_blue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Select
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Request
</UL>

<P><STRONG><a name="[eb]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>MX_DMA_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>MX_GPIO_Init</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>MX_TIM1_Init</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>MX_TIM2_Init</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>MX_TIM3_Init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>MX_TIM4_Init</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>MX_TIM5_Init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>MX_TIM6_Init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>MX_UART4_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>MX_UART5_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MX_UART7_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_UART7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART7_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>MX_UART8_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_UART8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>QR_restore_default</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, qrcode.o(i.QR_restore_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QR_restore_default &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>Set_Steering_anticlockwise</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, turnover_steering.o(i.Set_Steering_anticlockwise))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
</UL>

<P><STRONG><a name="[168]"></a>Set_Steering_clockwise</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, turnover_steering.o(i.Set_Steering_clockwise))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
</UL>

<P><STRONG><a name="[169]"></a>Set_Steering_stop</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, turnover_steering.o(i.Set_Steering_stop))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
</UL>

<P><STRONG><a name="[106]"></a>Steering_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, turnover_steering.o(i.Steering_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Steering_Init &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>SystemClock_Config</STRONG> (Thumb, 188 bytes, Stack size 216 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>TIM3CaptureChannel1Callback</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, motor_encoder.o(i.TIM3CaptureChannel1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM3CaptureChannel1Callback &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[be]"></a>TIM3CaptureChannel3Callback</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, motor_encoder.o(i.TIM3CaptureChannel3Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM3CaptureChannel3Callback &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>TIM3_IcOverflowCntCallback</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motor_encoder.o(i.TIM3_IcOverflowCntCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[bb]"></a>TIM5CaptureChannel1Callback</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, motor_encoder.o(i.TIM5CaptureChannel1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM5CaptureChannel1Callback &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[bc]"></a>TIM5CaptureChannel3Callback</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, motor_encoder.o(i.TIM5CaptureChannel3Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM5CaptureChannel3Callback &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>TIM5_IcOverflowCntCallback</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motor_encoder.o(i.TIM5_IcOverflowCntCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, time_cnt.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; chassis_synthetic_control &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[c7]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[b6]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d3]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[c0]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART7_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART8_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART8_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f0]"></a>UART_CheckIdleState</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ee]"></a>UART_SetConfig</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[de]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>

<P><STRONG><a name="[f3]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[111]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[118]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[115]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[117]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[11a]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[116]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[114]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[113]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[11c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[18d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[112]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[11d]"></a>blue_or_red</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, walk_task.o(i.blue_or_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = blue_or_red &rArr; path_plan_blue &rArr; Catch_Steppedplatform_blue &rArr; move_by_encoder &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distinguish_red
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distinguish_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>calculate_diviation</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, track_task.o(i.calculate_diviation))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calculate_diviation
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_pid
</UL>

<P><STRONG><a name="[14a]"></a>change_chassis_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(i.change_chassis_status))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>chassis_synthetic_control</STRONG> (Thumb, 734 bytes, Stack size 64 bytes, motor.o(i.chassis_synthetic_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = chassis_synthetic_control &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_pid
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_freq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_incremental
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_speed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>cmd_action_group_run</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lsc.o(i.cmd_action_group_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_InitInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_3
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_1
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_3
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_3
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_1
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_3
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_switch
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_3
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_1
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_3_to_storehouse
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_2_to_storehouse
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_1_to_storehouse
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_disc_to_storehouse_blue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_disc_blue
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Stripplatform
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_3
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_2
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Stripplatform_to_storehouse
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_3_to_storehouse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_2_to_storehouse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_1_to_storehouse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Stepped_distinguish
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Init
</UL>

<P><STRONG><a name="[128]"></a>cmd_action_group_speed</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lsc.o(i.cmd_action_group_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_3
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_1
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_3_to_storehouse
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_2_to_storehouse
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_1_to_storehouse
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Stripplatform
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_3
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_2
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Steppedplatform_1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Stripplatform_to_storehouse
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_3_to_storehouse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_2_to_storehouse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Steppedplatform_1_to_storehouse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Stepped_distinguish
</UL>

<P><STRONG><a name="[13e]"></a>delay_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_delay.o(i.delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>delay_ms</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_two_warehouse_red
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_two_warehouse_blue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_workspace_red
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_workspace_blue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_warehouse_column4_red
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_one_warehouse_blue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line3_to_line2_red
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line2_to_line_1_red
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line2_to_line_1_blue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_red
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_blue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
</UL>

<P><STRONG><a name="[120]"></a>distinguish_blue</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, openmv.o(i.distinguish_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = distinguish_blue &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_or_red
</UL>

<P><STRONG><a name="[11e]"></a>distinguish_red</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, openmv.o(i.distinguish_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = distinguish_red &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_or_red
</UL>

<P><STRONG><a name="[119]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[129]"></a>final_Catch_disc_blue</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, catch_task.o(i.final_Catch_disc_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = final_Catch_disc_blue &rArr; get_ball_id &rArr; send_Read &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_openmv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_distinguish_Strip
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_catch_red_disc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_disc_to_storehouse_blue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_disc_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[12e]"></a>final_Catch_disc_red</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, catch_task.o(i.final_Catch_disc_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = final_Catch_disc_red &rArr; servogroup_catch_Stripplatform &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_openmv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_distinguish_Strip
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_catch_Stripplatform
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Stripplatform_to_storehouse
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
</UL>

<P><STRONG><a name="[98]"></a>get_ball_id</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ats522.o(i.get_ball_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_ball_id &rArr; send_Read &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Authkey
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Anticoll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ats522
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_SendBUF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Select
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[138]"></a>go_home_blue</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, walk_task.o(i.go_home_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = go_home_blue &rArr; servogroup_InitInit &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_InitInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_track_status
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[13b]"></a>go_home_red</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, walk_task.o(i.go_home_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = go_home_red &rArr; servogroup_InitInit &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_InitInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_track_status
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
</UL>

<P><STRONG><a name="[13c]"></a>hit_baffle_blue</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, walk_task.o(i.hit_baffle_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hit_baffle_blue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[13d]"></a>hit_baffle_red</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, walk_task.o(i.hit_baffle_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hit_baffle_red
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[157]"></a>look_for_location</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, put_task.o(i.look_for_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = look_for_location
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
</UL>

<P><STRONG><a name="[6d]"></a>main</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; blue_or_red &rArr; path_plan_blue &rArr; Catch_Steppedplatform_blue &rArr; move_by_encoder &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_pid_data_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_InitInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_trackboard_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_qrcode_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_openmv_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_ats522_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pid_data_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor4_Enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor3_Enable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor2_Enable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor1_Enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_chassis_status
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_or_red
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steering_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_restore_default
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[144]"></a>motor1_Enable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, motor_config.o(i.motor1_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor1_Enable &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>motor2_Enable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, motor_config.o(i.motor2_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor2_Enable &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>motor3_Enable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, motor_config.o(i.motor3_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor3_Enable &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>motor4_Enable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, motor_config.o(i.motor4_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor4_Enable &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>motor_pid_data_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, motor_task.o(i.motor_pid_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>move_by_encoder</STRONG> (Thumb, 654 bytes, Stack size 96 bytes, motor.o(i.move_by_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = move_by_encoder &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[121]"></a>path_plan_blue</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, walk_task.o(i.path_plan_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = path_plan_blue &rArr; Catch_Steppedplatform_blue &rArr; move_by_encoder &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_blue
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_workspace_blue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_warehouse_column4_red
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_red
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_blue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_blue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_track_status
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_or_red
</UL>

<P><STRONG><a name="[11f]"></a>path_plan_red</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, walk_task.o(i.path_plan_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = path_plan_red &rArr; move_by_encoder &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_red
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_workspace_red
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_red
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_red
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_track_status
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_or_red
</UL>

<P><STRONG><a name="[125]"></a>pid_incremental</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, pid.o(i.pid_incremental))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pid_incremental &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_Period
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[155]"></a>pid_positional</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, pid.o(i.pid_positional))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pid_positional &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_Period
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_pid
</UL>

<P><STRONG><a name="[156]"></a>put_1th</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, put_task.o(i.put_1th))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = put_1th &rArr; servogroup_storehouse_to_floor_1 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_for_location
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_1_to_storehouse
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_red
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_blue
</UL>

<P><STRONG><a name="[15a]"></a>put_2th</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, put_task.o(i.put_2th))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = put_2th &rArr; servogroup_storehouse_to_floor_2 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_for_location
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_2
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_2_to_storehouse
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_red
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_blue
</UL>

<P><STRONG><a name="[15d]"></a>put_3th</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, put_task.o(i.put_3th))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = put_3th &rArr; servogroup_storehouse_to_floor_3 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_for_location
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;span
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_storehouse_to_floor_3
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_floor_3_to_storehouse
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_red
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_blue
</UL>

<P><STRONG><a name="[14f]"></a>re_and_final_lay_blue</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, put_task.o(i.re_and_final_lay_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = re_and_final_lay_blue &rArr; put_3th &rArr; servogroup_storehouse_to_floor_3 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_two_warehouse_blue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_one_warehouse_blue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line2_to_line_1_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[153]"></a>re_and_final_lay_red</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, put_task.o(i.re_and_final_lay_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = re_and_final_lay_red &rArr; put_3th &rArr; servogroup_storehouse_to_floor_3 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_two_warehouse_red
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line3_to_line2_red
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line2_to_line_1_red
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
</UL>

<P><STRONG><a name="[124]"></a>read_freq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motor_task.o(i.read_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_freq &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[e6]"></a>receive_ats522_IRQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ats522.o(i.receive_ats522_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = receive_ats522_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[143]"></a>receive_ats522_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ats522.o(i.receive_ats522_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = receive_ats522_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>receive_openmv_IRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, openmv.o(i.receive_openmv_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = receive_openmv_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[142]"></a>receive_openmv_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, openmv.o(i.receive_openmv_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = receive_openmv_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>receive_qrcode_IRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, qrcode.o(i.receive_qrcode_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = receive_qrcode_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[141]"></a>receive_qrcode_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, qrcode.o(i.receive_qrcode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = receive_qrcode_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>receive_trackboard_IRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, trackboard.o(i.receive_trackboard_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[140]"></a>receive_trackboard_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, trackboard.o(i.receive_trackboard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = receive_trackboard_Init &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>send_Anticoll</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ats522.o(i.send_Anticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_Anticoll &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
</UL>

<P><STRONG><a name="[136]"></a>send_Authkey</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ats522.o(i.send_Authkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_Authkey &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
</UL>

<P><STRONG><a name="[137]"></a>send_Read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ats522.o(i.send_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_Read &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
</UL>

<P><STRONG><a name="[132]"></a>send_Request</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ats522.o(i.send_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_Request &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
</UL>

<P><STRONG><a name="[135]"></a>send_Select</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ats522.o(i.send_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_Select &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ball_id
</UL>

<P><STRONG><a name="[14c]"></a>servogroup_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.servogroup_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = servogroup_Init &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[13a]"></a>servogroup_InitInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.servogroup_InitInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = servogroup_InitInit &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_red
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_blue
</UL>

<P><STRONG><a name="[8b]"></a>servogroup_Stepped_distinguish</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_Stepped_distinguish))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_Stepped_distinguish &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[95]"></a>servogroup_Steppedplatform_1_to_storehouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_Steppedplatform_1_to_storehouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_Steppedplatform_1_to_storehouse &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[96]"></a>servogroup_Steppedplatform_2_to_storehouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_Steppedplatform_2_to_storehouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_Steppedplatform_2_to_storehouse &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[9a]"></a>servogroup_Steppedplatform_3_to_storehouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_Steppedplatform_3_to_storehouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_Steppedplatform_3_to_storehouse &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[130]"></a>servogroup_Stripplatform_to_storehouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_Stripplatform_to_storehouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_Stripplatform_to_storehouse &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
</UL>

<P><STRONG><a name="[91]"></a>servogroup_catch_Steppedplatform_1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_catch_Steppedplatform_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_catch_Steppedplatform_1 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[92]"></a>servogroup_catch_Steppedplatform_2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_catch_Steppedplatform_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_catch_Steppedplatform_2 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[94]"></a>servogroup_catch_Steppedplatform_3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_catch_Steppedplatform_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_catch_Steppedplatform_3 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[12f]"></a>servogroup_catch_Stripplatform</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_catch_Stripplatform))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_catch_Stripplatform &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
</UL>

<P><STRONG><a name="[12a]"></a>servogroup_catch_disc_blue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.servogroup_catch_disc_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = servogroup_catch_disc_blue &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
</UL>

<P><STRONG><a name="[12c]"></a>servogroup_disc_to_storehouse_blue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.servogroup_disc_to_storehouse_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = servogroup_disc_to_storehouse_blue &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
</UL>

<P><STRONG><a name="[159]"></a>servogroup_floor_1_to_storehouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_floor_1_to_storehouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_floor_1_to_storehouse &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
</UL>

<P><STRONG><a name="[15c]"></a>servogroup_floor_2_to_storehouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_floor_2_to_storehouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_floor_2_to_storehouse &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
</UL>

<P><STRONG><a name="[15f]"></a>servogroup_floor_3_to_storehouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_floor_3_to_storehouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_floor_3_to_storehouse &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
</UL>

<P><STRONG><a name="[158]"></a>servogroup_storehouse_to_floor_1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_storehouse_to_floor_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_storehouse_to_floor_1 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
</UL>

<P><STRONG><a name="[15b]"></a>servogroup_storehouse_to_floor_2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_storehouse_to_floor_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_storehouse_to_floor_2 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
</UL>

<P><STRONG><a name="[15e]"></a>servogroup_storehouse_to_floor_3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsc.o(i.servogroup_storehouse_to_floor_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = servogroup_storehouse_to_floor_3 &rArr; cmd_action_group_speed &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_speed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
</UL>

<P><STRONG><a name="[166]"></a>servogroup_switch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.servogroup_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = servogroup_switch &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[8f]"></a>set_chassis_speed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(i.set_chassis_speed))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_two_warehouse_red
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_two_warehouse_blue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_workspace_red
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_workspace_blue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_warehouse_column4_red
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_one_warehouse_blue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line3_to_line2_red
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line2_to_line_1_red
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_line2_to_line_1_blue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_red
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_blue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_red
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_blue
</UL>

<P><STRONG><a name="[126]"></a>set_motor_speed</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, motor_pwm.o(i.set_motor_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_motor_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[139]"></a>set_track_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, track_task.o(i.set_track_status))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_red
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_home_blue
</UL>

<P><STRONG><a name="[8c]"></a>span</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, turntable_task.o(i.span))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = span
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Steering_stop
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Steering_clockwise
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Steering_anticlockwise
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[16a]"></a>stack_transfer_back_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_back_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_back_1 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[16b]"></a>stack_transfer_back_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_back_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_back_2 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[16c]"></a>stack_transfer_back_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_back_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_back_3 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[14e]"></a>stack_transfer_blue</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, stack_transfer.o(i.stack_transfer_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stack_transfer_blue &rArr; stack_transfer_put_3 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_warehouse_column4_red
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_red
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_transfer_blue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_transfer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_3
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_1
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_3
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_3
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_1
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_3
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[172]"></a>stack_transfer_catch_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_catch_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_catch_1 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[173]"></a>stack_transfer_catch_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_catch_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_catch_2 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[174]"></a>stack_transfer_catch_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_catch_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_catch_3 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[16e]"></a>stack_transfer_distinguish_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_distinguish_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_distinguish_1 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[16f]"></a>stack_transfer_distinguish_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_distinguish_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_distinguish_2 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[170]"></a>stack_transfer_distinguish_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_distinguish_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_distinguish_3 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[175]"></a>stack_transfer_put_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_put_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_put_1 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[176]"></a>stack_transfer_put_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_put_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_put_2 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[177]"></a>stack_transfer_put_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsc.o(i.stack_transfer_put_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stack_transfer_put_3 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_action_group_run
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[152]"></a>stack_transfer_red</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, stack_transfer.o(i.stack_transfer_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stack_transfer_red &rArr; stack_transfer_put_3 &rArr; cmd_action_group_run &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;walk_to_warehouse_column4_red
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hit_baffle_red
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_transfer_red
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_transfer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_openmv_to_loosen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tell_claw_to_catch
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_3
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_put_1
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_3
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_2
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_distinguish_1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_3
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_catch_1
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_3
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_back_1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servogroup_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
</UL>

<P><STRONG><a name="[93]"></a>tell_claw_to_catch</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, openmv.o(i.tell_claw_to_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tell_claw_to_catch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[12d]"></a>tell_openmv_to_catch_red_disc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, openmv.o(i.tell_openmv_to_catch_red_disc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tell_openmv_to_catch_red_disc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
</UL>

<P><STRONG><a name="[8d]"></a>tell_openmv_to_distinguish_Stepped</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, openmv.o(i.tell_openmv_to_distinguish_Stepped))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tell_openmv_to_distinguish_Stepped &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[12b]"></a>tell_openmv_to_distinguish_Strip</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, openmv.o(i.tell_openmv_to_distinguish_Strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tell_openmv_to_distinguish_Strip &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_blue
</UL>

<P><STRONG><a name="[97]"></a>tell_openmv_to_loosen</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, openmv.o(i.tell_openmv_to_loosen))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tell_openmv_to_loosen &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_3th
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_2th
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_1th
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_Catch_disc_red
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_red
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Catch_Steppedplatform_blue
</UL>

<P><STRONG><a name="[171]"></a>tell_openmv_to_transfer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, openmv.o(i.tell_openmv_to_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tell_openmv_to_transfer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[16d]"></a>tell_openmv_to_transfer_blue</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, openmv.o(i.tell_openmv_to_transfer_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tell_openmv_to_transfer_blue &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
</UL>

<P><STRONG><a name="[178]"></a>tell_openmv_to_transfer_red</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, openmv.o(i.tell_openmv_to_transfer_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tell_openmv_to_transfer_red &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
</UL>

<P><STRONG><a name="[122]"></a>track_pid</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, track_task.o(i.track_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = track_pid &rArr; pid_positional &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_diviation
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_positional
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[149]"></a>track_pid_data_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, track_task.o(i.track_pid_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>walk_line2_to_line_1_blue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, walk_task.o(i.walk_line2_to_line_1_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_line2_to_line_1_blue &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_blue
</UL>

<P><STRONG><a name="[165]"></a>walk_line2_to_line_1_red</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, walk_task.o(i.walk_line2_to_line_1_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_line2_to_line_1_red &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_red
</UL>

<P><STRONG><a name="[164]"></a>walk_line3_to_line2_red</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, walk_task.o(i.walk_line3_to_line2_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_line3_to_line2_red &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_red
</UL>

<P><STRONG><a name="[161]"></a>walk_one_warehouse_blue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, walk_task.o(i.walk_one_warehouse_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_one_warehouse_blue &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_blue
</UL>

<P><STRONG><a name="[150]"></a>walk_to_warehouse_column4_red</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, walk_task.o(i.walk_to_warehouse_column4_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_to_warehouse_column4_red &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_red
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_transfer_blue
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[14d]"></a>walk_to_workspace_blue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, walk_task.o(i.walk_to_workspace_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_to_workspace_blue &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_blue
</UL>

<P><STRONG><a name="[151]"></a>walk_to_workspace_red</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, walk_task.o(i.walk_to_workspace_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_to_workspace_red &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_plan_red
</UL>

<P><STRONG><a name="[160]"></a>walk_two_warehouse_blue</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, walk_task.o(i.walk_two_warehouse_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_two_warehouse_blue &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_blue
</UL>

<P><STRONG><a name="[163]"></a>walk_two_warehouse_red</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, walk_task.o(i.walk_two_warehouse_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = walk_two_warehouse_red &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_and_final_lay_red
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ab]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b9]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d2]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[d4]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[d5]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[d6]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[d7]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[b7]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[b8]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c1]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[a1]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[a0]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[a3]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[70]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[73]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[71]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[72]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; receive_trackboard_IRQ &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[e8]"></a>UART_EndRxTransfer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[10c]"></a>UART_EndTxTransfer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
